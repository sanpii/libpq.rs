// Autogenerated file - DO NOT EDIT
/// successful completion
pub const SUCCESSFUL_COMPLETION: State = State {
    code: "00000",
    name: "SUCCESSFUL_COMPLETION",
    kind: Kind::Success,
    message: Some("successful completion"),
};
/// warning
pub const WARNING: State = State {
    code: "01000",
    name: "WARNING",
    kind: Kind::Warning,
    message: Some("warning"),
};
/// null value eliminated in set function
pub const WARNING_NULL_VALUE_ELIMINATED_IN_SET_FUNCTION: State = State {
    code: "01003",
    name: "WARNING_NULL_VALUE_ELIMINATED_IN_SET_FUNCTION",
    kind: Kind::Warning,
    message: Some("null value eliminated in set function"),
};
/// string data right truncation
pub const WARNING_STRING_DATA_RIGHT_TRUNCATION: State = State {
    code: "01004",
    name: "WARNING_STRING_DATA_RIGHT_TRUNCATION",
    kind: Kind::Warning,
    message: Some("string data right truncation"),
};
/// privilege not revoked
pub const WARNING_PRIVILEGE_NOT_REVOKED: State = State {
    code: "01006",
    name: "WARNING_PRIVILEGE_NOT_REVOKED",
    kind: Kind::Warning,
    message: Some("privilege not revoked"),
};
/// privilege not granted
pub const WARNING_PRIVILEGE_NOT_GRANTED: State = State {
    code: "01007",
    name: "WARNING_PRIVILEGE_NOT_GRANTED",
    kind: Kind::Warning,
    message: Some("privilege not granted"),
};
/// implicit zero bit padding
pub const WARNING_IMPLICIT_ZERO_BIT_PADDING: State = State {
    code: "01008",
    name: "WARNING_IMPLICIT_ZERO_BIT_PADDING",
    kind: Kind::Warning,
    message: Some("implicit zero bit padding"),
};
/// dynamic result sets returned
pub const WARNING_DYNAMIC_RESULT_SETS_RETURNED: State = State {
    code: "0100C",
    name: "WARNING_DYNAMIC_RESULT_SETS_RETURNED",
    kind: Kind::Warning,
    message: Some("dynamic result sets returned"),
};
/// deprecated feature
pub const WARNING_DEPRECATED_FEATURE: State = State {
    code: "01P01",
    name: "WARNING_DEPRECATED_FEATURE",
    kind: Kind::Warning,
    message: Some("deprecated feature"),
};
/// no data
pub const NO_DATA: State = State {
    code: "02000",
    name: "NO_DATA",
    kind: Kind::Warning,
    message: Some("no data"),
};
/// no additional dynamic result sets returned
pub const NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED: State = State {
    code: "02001",
    name: "NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED",
    kind: Kind::Warning,
    message: Some("no additional dynamic result sets returned"),
};
/// sql statement not yet complete
pub const SQL_STATEMENT_NOT_YET_COMPLETE: State = State {
    code: "03000",
    name: "SQL_STATEMENT_NOT_YET_COMPLETE",
    kind: Kind::Error,
    message: Some("sql statement not yet complete"),
};
/// connection exception
pub const CONNECTION_EXCEPTION: State = State {
    code: "08000",
    name: "CONNECTION_EXCEPTION",
    kind: Kind::Error,
    message: Some("connection exception"),
};
/// sqlclient unable to establish sqlconnection
pub const SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION: State = State {
    code: "08001",
    name: "SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION",
    kind: Kind::Error,
    message: Some("sqlclient unable to establish sqlconnection"),
};
/// connection does not exist
pub const CONNECTION_DOES_NOT_EXIST: State = State {
    code: "08003",
    name: "CONNECTION_DOES_NOT_EXIST",
    kind: Kind::Error,
    message: Some("connection does not exist"),
};
/// sqlserver rejected establishment of sqlconnection
pub const SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION: State = State {
    code: "08004",
    name: "SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION",
    kind: Kind::Error,
    message: Some("sqlserver rejected establishment of sqlconnection"),
};
/// connection failure
pub const CONNECTION_FAILURE: State = State {
    code: "08006",
    name: "CONNECTION_FAILURE",
    kind: Kind::Error,
    message: Some("connection failure"),
};
/// transaction resolution unknown
pub const TRANSACTION_RESOLUTION_UNKNOWN: State = State {
    code: "08007",
    name: "TRANSACTION_RESOLUTION_UNKNOWN",
    kind: Kind::Error,
    message: Some("transaction resolution unknown"),
};
/// protocol violation
pub const PROTOCOL_VIOLATION: State = State {
    code: "08P01",
    name: "PROTOCOL_VIOLATION",
    kind: Kind::Error,
    message: Some("protocol violation"),
};
/// triggered action exception
pub const TRIGGERED_ACTION_EXCEPTION: State = State {
    code: "09000",
    name: "TRIGGERED_ACTION_EXCEPTION",
    kind: Kind::Error,
    message: Some("triggered action exception"),
};
/// feature not supported
pub const FEATURE_NOT_SUPPORTED: State = State {
    code: "0A000",
    name: "FEATURE_NOT_SUPPORTED",
    kind: Kind::Error,
    message: Some("feature not supported"),
};
/// invalid transaction initiation
pub const INVALID_TRANSACTION_INITIATION: State = State {
    code: "0B000",
    name: "INVALID_TRANSACTION_INITIATION",
    kind: Kind::Error,
    message: Some("invalid transaction initiation"),
};
/// locator exception
pub const LOCATOR_EXCEPTION: State = State {
    code: "0F000",
    name: "LOCATOR_EXCEPTION",
    kind: Kind::Error,
    message: Some("locator exception"),
};
/// invalid locator specification
pub const L_E_INVALID_SPECIFICATION: State = State {
    code: "0F001",
    name: "L_E_INVALID_SPECIFICATION",
    kind: Kind::Error,
    message: Some("invalid locator specification"),
};
/// invalid grantor
pub const INVALID_GRANTOR: State = State {
    code: "0L000",
    name: "INVALID_GRANTOR",
    kind: Kind::Error,
    message: Some("invalid grantor"),
};
/// invalid grant operation
pub const INVALID_GRANT_OPERATION: State = State {
    code: "0LP01",
    name: "INVALID_GRANT_OPERATION",
    kind: Kind::Error,
    message: Some("invalid grant operation"),
};
/// invalid role specification
pub const INVALID_ROLE_SPECIFICATION: State = State {
    code: "0P000",
    name: "INVALID_ROLE_SPECIFICATION",
    kind: Kind::Error,
    message: Some("invalid role specification"),
};
/// diagnostics exception
pub const DIAGNOSTICS_EXCEPTION: State = State {
    code: "0Z000",
    name: "DIAGNOSTICS_EXCEPTION",
    kind: Kind::Error,
    message: Some("diagnostics exception"),
};
/// stacked diagnostics accessed without active handler
pub const STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER: State = State {
    code: "0Z002",
    name: "STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER",
    kind: Kind::Error,
    message: Some("stacked diagnostics accessed without active handler"),
};
/// case not found
pub const CASE_NOT_FOUND: State = State {
    code: "20000",
    name: "CASE_NOT_FOUND",
    kind: Kind::Error,
    message: Some("case not found"),
};
/// cardinality violation
pub const CARDINALITY_VIOLATION: State = State {
    code: "21000",
    name: "CARDINALITY_VIOLATION",
    kind: Kind::Error,
    message: Some("cardinality violation"),
};
/// data exception
pub const DATA_EXCEPTION: State = State {
    code: "22000",
    name: "DATA_EXCEPTION",
    kind: Kind::Error,
    message: Some("data exception"),
};
/// string data right truncation
pub const STRING_DATA_RIGHT_TRUNCATION: State = State {
    code: "22001",
    name: "STRING_DATA_RIGHT_TRUNCATION",
    kind: Kind::Error,
    message: Some("string data right truncation"),
};
/// null value no indicator parameter
pub const NULL_VALUE_NO_INDICATOR_PARAMETER: State = State {
    code: "22002",
    name: "NULL_VALUE_NO_INDICATOR_PARAMETER",
    kind: Kind::Error,
    message: Some("null value no indicator parameter"),
};
/// numeric value out of range
pub const NUMERIC_VALUE_OUT_OF_RANGE: State = State {
    code: "22003",
    name: "NUMERIC_VALUE_OUT_OF_RANGE",
    kind: Kind::Error,
    message: Some("numeric value out of range"),
};
/// null value not allowed
pub const NULL_VALUE_NOT_ALLOWED: State = State {
    code: "22004",
    name: "NULL_VALUE_NOT_ALLOWED",
    kind: Kind::Error,
    message: Some("null value not allowed"),
};
/// error in assignment
pub const ERROR_IN_ASSIGNMENT: State = State {
    code: "22005",
    name: "ERROR_IN_ASSIGNMENT",
    kind: Kind::Error,
    message: Some("error in assignment"),
};
/// invalid datetime format
pub const INVALID_DATETIME_FORMAT: State = State {
    code: "22007",
    name: "INVALID_DATETIME_FORMAT",
    kind: Kind::Error,
    message: Some("invalid datetime format"),
};

pub const DATETIME_VALUE_OUT_OF_RANGE: State = State {
    code: "22008",
    name: "DATETIME_VALUE_OUT_OF_RANGE",
    kind: Kind::Error,
    message: None,
};
/// invalid time zone displacement value
pub const INVALID_TIME_ZONE_DISPLACEMENT_VALUE: State = State {
    code: "22009",
    name: "INVALID_TIME_ZONE_DISPLACEMENT_VALUE",
    kind: Kind::Error,
    message: Some("invalid time zone displacement value"),
};
/// escape character conflict
pub const ESCAPE_CHARACTER_CONFLICT: State = State {
    code: "2200B",
    name: "ESCAPE_CHARACTER_CONFLICT",
    kind: Kind::Error,
    message: Some("escape character conflict"),
};
/// invalid use of escape character
pub const INVALID_USE_OF_ESCAPE_CHARACTER: State = State {
    code: "2200C",
    name: "INVALID_USE_OF_ESCAPE_CHARACTER",
    kind: Kind::Error,
    message: Some("invalid use of escape character"),
};
/// invalid escape octet
pub const INVALID_ESCAPE_OCTET: State = State {
    code: "2200D",
    name: "INVALID_ESCAPE_OCTET",
    kind: Kind::Error,
    message: Some("invalid escape octet"),
};
/// zero length character string
pub const ZERO_LENGTH_CHARACTER_STRING: State = State {
    code: "2200F",
    name: "ZERO_LENGTH_CHARACTER_STRING",
    kind: Kind::Error,
    message: Some("zero length character string"),
};
/// most specific type mismatch
pub const MOST_SPECIFIC_TYPE_MISMATCH: State = State {
    code: "2200G",
    name: "MOST_SPECIFIC_TYPE_MISMATCH",
    kind: Kind::Error,
    message: Some("most specific type mismatch"),
};
/// sequence generator limit exceeded
pub const SEQUENCE_GENERATOR_LIMIT_EXCEEDED: State = State {
    code: "2200H",
    name: "SEQUENCE_GENERATOR_LIMIT_EXCEEDED",
    kind: Kind::Error,
    message: Some("sequence generator limit exceeded"),
};
/// not an xml document
pub const NOT_AN_XML_DOCUMENT: State = State {
    code: "2200L",
    name: "NOT_AN_XML_DOCUMENT",
    kind: Kind::Error,
    message: Some("not an xml document"),
};
/// invalid xml document
pub const INVALID_XML_DOCUMENT: State = State {
    code: "2200M",
    name: "INVALID_XML_DOCUMENT",
    kind: Kind::Error,
    message: Some("invalid xml document"),
};
/// invalid xml content
pub const INVALID_XML_CONTENT: State = State {
    code: "2200N",
    name: "INVALID_XML_CONTENT",
    kind: Kind::Error,
    message: Some("invalid xml content"),
};
/// invalid xml comment
pub const INVALID_XML_COMMENT: State = State {
    code: "2200S",
    name: "INVALID_XML_COMMENT",
    kind: Kind::Error,
    message: Some("invalid xml comment"),
};
/// invalid xml processing instruction
pub const INVALID_XML_PROCESSING_INSTRUCTION: State = State {
    code: "2200T",
    name: "INVALID_XML_PROCESSING_INSTRUCTION",
    kind: Kind::Error,
    message: Some("invalid xml processing instruction"),
};
/// invalid indicator parameter value
pub const INVALID_INDICATOR_PARAMETER_VALUE: State = State {
    code: "22010",
    name: "INVALID_INDICATOR_PARAMETER_VALUE",
    kind: Kind::Error,
    message: Some("invalid indicator parameter value"),
};
/// substring error
pub const SUBSTRING_ERROR: State = State {
    code: "22011",
    name: "SUBSTRING_ERROR",
    kind: Kind::Error,
    message: Some("substring error"),
};
/// division by zero
pub const DIVISION_BY_ZERO: State = State {
    code: "22012",
    name: "DIVISION_BY_ZERO",
    kind: Kind::Error,
    message: Some("division by zero"),
};
/// invalid preceding or following size
pub const INVALID_PRECEDING_OR_FOLLOWING_SIZE: State = State {
    code: "22013",
    name: "INVALID_PRECEDING_OR_FOLLOWING_SIZE",
    kind: Kind::Error,
    message: Some("invalid preceding or following size"),
};
/// invalid argument for ntile function
pub const INVALID_ARGUMENT_FOR_NTILE: State = State {
    code: "22014",
    name: "INVALID_ARGUMENT_FOR_NTILE",
    kind: Kind::Error,
    message: Some("invalid argument for ntile function"),
};
/// interval field overflow
pub const INTERVAL_FIELD_OVERFLOW: State = State {
    code: "22015",
    name: "INTERVAL_FIELD_OVERFLOW",
    kind: Kind::Error,
    message: Some("interval field overflow"),
};
/// invalid argument for nth value function
pub const INVALID_ARGUMENT_FOR_NTH_VALUE: State = State {
    code: "22016",
    name: "INVALID_ARGUMENT_FOR_NTH_VALUE",
    kind: Kind::Error,
    message: Some("invalid argument for nth value function"),
};
/// invalid character value for cast
pub const INVALID_CHARACTER_VALUE_FOR_CAST: State = State {
    code: "22018",
    name: "INVALID_CHARACTER_VALUE_FOR_CAST",
    kind: Kind::Error,
    message: Some("invalid character value for cast"),
};
/// invalid escape character
pub const INVALID_ESCAPE_CHARACTER: State = State {
    code: "22019",
    name: "INVALID_ESCAPE_CHARACTER",
    kind: Kind::Error,
    message: Some("invalid escape character"),
};
/// invalid regular expression
pub const INVALID_REGULAR_EXPRESSION: State = State {
    code: "2201B",
    name: "INVALID_REGULAR_EXPRESSION",
    kind: Kind::Error,
    message: Some("invalid regular expression"),
};
/// invalid argument for logarithm
pub const INVALID_ARGUMENT_FOR_LOG: State = State {
    code: "2201E",
    name: "INVALID_ARGUMENT_FOR_LOG",
    kind: Kind::Error,
    message: Some("invalid argument for logarithm"),
};
/// invalid argument for power function
pub const INVALID_ARGUMENT_FOR_POWER_FUNCTION: State = State {
    code: "2201F",
    name: "INVALID_ARGUMENT_FOR_POWER_FUNCTION",
    kind: Kind::Error,
    message: Some("invalid argument for power function"),
};
/// invalid argument for width bucket function
pub const INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION: State = State {
    code: "2201G",
    name: "INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION",
    kind: Kind::Error,
    message: Some("invalid argument for width bucket function"),
};
/// invalid row count in limit clause
pub const INVALID_ROW_COUNT_IN_LIMIT_CLAUSE: State = State {
    code: "2201W",
    name: "INVALID_ROW_COUNT_IN_LIMIT_CLAUSE",
    kind: Kind::Error,
    message: Some("invalid row count in limit clause"),
};
/// invalid row count in result offset clause
pub const INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE: State = State {
    code: "2201X",
    name: "INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE",
    kind: Kind::Error,
    message: Some("invalid row count in result offset clause"),
};
/// character not in repertoire
pub const CHARACTER_NOT_IN_REPERTOIRE: State = State {
    code: "22021",
    name: "CHARACTER_NOT_IN_REPERTOIRE",
    kind: Kind::Error,
    message: Some("character not in repertoire"),
};
/// indicator overflow
pub const INDICATOR_OVERFLOW: State = State {
    code: "22022",
    name: "INDICATOR_OVERFLOW",
    kind: Kind::Error,
    message: Some("indicator overflow"),
};
/// invalid parameter value
pub const INVALID_PARAMETER_VALUE: State = State {
    code: "22023",
    name: "INVALID_PARAMETER_VALUE",
    kind: Kind::Error,
    message: Some("invalid parameter value"),
};
/// unterminated c string
pub const UNTERMINATED_C_STRING: State = State {
    code: "22024",
    name: "UNTERMINATED_C_STRING",
    kind: Kind::Error,
    message: Some("unterminated c string"),
};
/// invalid escape sequence
pub const INVALID_ESCAPE_SEQUENCE: State = State {
    code: "22025",
    name: "INVALID_ESCAPE_SEQUENCE",
    kind: Kind::Error,
    message: Some("invalid escape sequence"),
};
/// string data length mismatch
pub const STRING_DATA_LENGTH_MISMATCH: State = State {
    code: "22026",
    name: "STRING_DATA_LENGTH_MISMATCH",
    kind: Kind::Error,
    message: Some("string data length mismatch"),
};
/// trim error
pub const TRIM_ERROR: State = State {
    code: "22027",
    name: "TRIM_ERROR",
    kind: Kind::Error,
    message: Some("trim error"),
};
/// array subscript error
pub const ARRAY_SUBSCRIPT_ERROR: State = State {
    code: "2202E",
    name: "ARRAY_SUBSCRIPT_ERROR",
    kind: Kind::Error,
    message: Some("array subscript error"),
};
/// invalid tablesample repeat
pub const INVALID_TABLESAMPLE_REPEAT: State = State {
    code: "2202G",
    name: "INVALID_TABLESAMPLE_REPEAT",
    kind: Kind::Error,
    message: Some("invalid tablesample repeat"),
};
/// invalid tablesample argument
pub const INVALID_TABLESAMPLE_ARGUMENT: State = State {
    code: "2202H",
    name: "INVALID_TABLESAMPLE_ARGUMENT",
    kind: Kind::Error,
    message: Some("invalid tablesample argument"),
};
/// duplicate json object key value
pub const DUPLICATE_JSON_OBJECT_KEY_VALUE: State = State {
    code: "22030",
    name: "DUPLICATE_JSON_OBJECT_KEY_VALUE",
    kind: Kind::Error,
    message: Some("duplicate json object key value"),
};
/// invalid argument for sql json datetime function
pub const INVALID_ARGUMENT_FOR_SQL_JSON_DATETIME_FUNCTION: State = State {
    code: "22031",
    name: "INVALID_ARGUMENT_FOR_SQL_JSON_DATETIME_FUNCTION",
    kind: Kind::Error,
    message: Some("invalid argument for sql json datetime function"),
};
/// invalid json text
pub const INVALID_JSON_TEXT: State = State {
    code: "22032",
    name: "INVALID_JSON_TEXT",
    kind: Kind::Error,
    message: Some("invalid json text"),
};
/// invalid sql json subscript
pub const INVALID_SQL_JSON_SUBSCRIPT: State = State {
    code: "22033",
    name: "INVALID_SQL_JSON_SUBSCRIPT",
    kind: Kind::Error,
    message: Some("invalid sql json subscript"),
};
/// more than one sql json item
pub const MORE_THAN_ONE_SQL_JSON_ITEM: State = State {
    code: "22034",
    name: "MORE_THAN_ONE_SQL_JSON_ITEM",
    kind: Kind::Error,
    message: Some("more than one sql json item"),
};
/// no sql json item
pub const NO_SQL_JSON_ITEM: State = State {
    code: "22035",
    name: "NO_SQL_JSON_ITEM",
    kind: Kind::Error,
    message: Some("no sql json item"),
};
/// non numeric sql json item
pub const NON_NUMERIC_SQL_JSON_ITEM: State = State {
    code: "22036",
    name: "NON_NUMERIC_SQL_JSON_ITEM",
    kind: Kind::Error,
    message: Some("non numeric sql json item"),
};
/// non unique keys in a json object
pub const NON_UNIQUE_KEYS_IN_A_JSON_OBJECT: State = State {
    code: "22037",
    name: "NON_UNIQUE_KEYS_IN_A_JSON_OBJECT",
    kind: Kind::Error,
    message: Some("non unique keys in a json object"),
};
/// singleton sql json item required
pub const SINGLETON_SQL_JSON_ITEM_REQUIRED: State = State {
    code: "22038",
    name: "SINGLETON_SQL_JSON_ITEM_REQUIRED",
    kind: Kind::Error,
    message: Some("singleton sql json item required"),
};
/// sql json array not found
pub const SQL_JSON_ARRAY_NOT_FOUND: State = State {
    code: "22039",
    name: "SQL_JSON_ARRAY_NOT_FOUND",
    kind: Kind::Error,
    message: Some("sql json array not found"),
};
/// sql json member not found
pub const SQL_JSON_MEMBER_NOT_FOUND: State = State {
    code: "2203A",
    name: "SQL_JSON_MEMBER_NOT_FOUND",
    kind: Kind::Error,
    message: Some("sql json member not found"),
};
/// sql json number not found
pub const SQL_JSON_NUMBER_NOT_FOUND: State = State {
    code: "2203B",
    name: "SQL_JSON_NUMBER_NOT_FOUND",
    kind: Kind::Error,
    message: Some("sql json number not found"),
};
/// sql json object not found
pub const SQL_JSON_OBJECT_NOT_FOUND: State = State {
    code: "2203C",
    name: "SQL_JSON_OBJECT_NOT_FOUND",
    kind: Kind::Error,
    message: Some("sql json object not found"),
};
/// too many json array elements
pub const TOO_MANY_JSON_ARRAY_ELEMENTS: State = State {
    code: "2203D",
    name: "TOO_MANY_JSON_ARRAY_ELEMENTS",
    kind: Kind::Error,
    message: Some("too many json array elements"),
};
/// too many json object members
pub const TOO_MANY_JSON_OBJECT_MEMBERS: State = State {
    code: "2203E",
    name: "TOO_MANY_JSON_OBJECT_MEMBERS",
    kind: Kind::Error,
    message: Some("too many json object members"),
};
/// sql json scalar required
pub const SQL_JSON_SCALAR_REQUIRED: State = State {
    code: "2203F",
    name: "SQL_JSON_SCALAR_REQUIRED",
    kind: Kind::Error,
    message: Some("sql json scalar required"),
};
/// floating point exception
pub const FLOATING_POINT_EXCEPTION: State = State {
    code: "22P01",
    name: "FLOATING_POINT_EXCEPTION",
    kind: Kind::Error,
    message: Some("floating point exception"),
};
/// invalid text representation
pub const INVALID_TEXT_REPRESENTATION: State = State {
    code: "22P02",
    name: "INVALID_TEXT_REPRESENTATION",
    kind: Kind::Error,
    message: Some("invalid text representation"),
};
/// invalid binary representation
pub const INVALID_BINARY_REPRESENTATION: State = State {
    code: "22P03",
    name: "INVALID_BINARY_REPRESENTATION",
    kind: Kind::Error,
    message: Some("invalid binary representation"),
};
/// bad copy file format
pub const BAD_COPY_FILE_FORMAT: State = State {
    code: "22P04",
    name: "BAD_COPY_FILE_FORMAT",
    kind: Kind::Error,
    message: Some("bad copy file format"),
};
/// untranslatable character
pub const UNTRANSLATABLE_CHARACTER: State = State {
    code: "22P05",
    name: "UNTRANSLATABLE_CHARACTER",
    kind: Kind::Error,
    message: Some("untranslatable character"),
};
/// nonstandard use of escape character
pub const NONSTANDARD_USE_OF_ESCAPE_CHARACTER: State = State {
    code: "22P06",
    name: "NONSTANDARD_USE_OF_ESCAPE_CHARACTER",
    kind: Kind::Error,
    message: Some("nonstandard use of escape character"),
};
/// integrity constraint violation
pub const INTEGRITY_CONSTRAINT_VIOLATION: State = State {
    code: "23000",
    name: "INTEGRITY_CONSTRAINT_VIOLATION",
    kind: Kind::Error,
    message: Some("integrity constraint violation"),
};
/// restrict violation
pub const RESTRICT_VIOLATION: State = State {
    code: "23001",
    name: "RESTRICT_VIOLATION",
    kind: Kind::Error,
    message: Some("restrict violation"),
};
/// not null violation
pub const NOT_NULL_VIOLATION: State = State {
    code: "23502",
    name: "NOT_NULL_VIOLATION",
    kind: Kind::Error,
    message: Some("not null violation"),
};
/// foreign key violation
pub const FOREIGN_KEY_VIOLATION: State = State {
    code: "23503",
    name: "FOREIGN_KEY_VIOLATION",
    kind: Kind::Error,
    message: Some("foreign key violation"),
};
/// unique violation
pub const UNIQUE_VIOLATION: State = State {
    code: "23505",
    name: "UNIQUE_VIOLATION",
    kind: Kind::Error,
    message: Some("unique violation"),
};
/// check violation
pub const CHECK_VIOLATION: State = State {
    code: "23514",
    name: "CHECK_VIOLATION",
    kind: Kind::Error,
    message: Some("check violation"),
};
/// exclusion violation
pub const EXCLUSION_VIOLATION: State = State {
    code: "23P01",
    name: "EXCLUSION_VIOLATION",
    kind: Kind::Error,
    message: Some("exclusion violation"),
};
/// invalid cursor state
pub const INVALID_CURSOR_STATE: State = State {
    code: "24000",
    name: "INVALID_CURSOR_STATE",
    kind: Kind::Error,
    message: Some("invalid cursor state"),
};
/// invalid transaction state
pub const INVALID_TRANSACTION_STATE: State = State {
    code: "25000",
    name: "INVALID_TRANSACTION_STATE",
    kind: Kind::Error,
    message: Some("invalid transaction state"),
};
/// active sql transaction
pub const ACTIVE_SQL_TRANSACTION: State = State {
    code: "25001",
    name: "ACTIVE_SQL_TRANSACTION",
    kind: Kind::Error,
    message: Some("active sql transaction"),
};
/// branch transaction already active
pub const BRANCH_TRANSACTION_ALREADY_ACTIVE: State = State {
    code: "25002",
    name: "BRANCH_TRANSACTION_ALREADY_ACTIVE",
    kind: Kind::Error,
    message: Some("branch transaction already active"),
};
/// inappropriate access mode for branch transaction
pub const INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION: State = State {
    code: "25003",
    name: "INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION",
    kind: Kind::Error,
    message: Some("inappropriate access mode for branch transaction"),
};
/// inappropriate isolation level for branch transaction
pub const INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION: State = State {
    code: "25004",
    name: "INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION",
    kind: Kind::Error,
    message: Some("inappropriate isolation level for branch transaction"),
};
/// no active sql transaction for branch transaction
pub const NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION: State = State {
    code: "25005",
    name: "NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION",
    kind: Kind::Error,
    message: Some("no active sql transaction for branch transaction"),
};
/// read only sql transaction
pub const READ_ONLY_SQL_TRANSACTION: State = State {
    code: "25006",
    name: "READ_ONLY_SQL_TRANSACTION",
    kind: Kind::Error,
    message: Some("read only sql transaction"),
};
/// schema and data statement mixing not supported
pub const SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED: State = State {
    code: "25007",
    name: "SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED",
    kind: Kind::Error,
    message: Some("schema and data statement mixing not supported"),
};
/// held cursor requires same isolation level
pub const HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL: State = State {
    code: "25008",
    name: "HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL",
    kind: Kind::Error,
    message: Some("held cursor requires same isolation level"),
};
/// no active sql transaction
pub const NO_ACTIVE_SQL_TRANSACTION: State = State {
    code: "25P01",
    name: "NO_ACTIVE_SQL_TRANSACTION",
    kind: Kind::Error,
    message: Some("no active sql transaction"),
};
/// in failed sql transaction
pub const IN_FAILED_SQL_TRANSACTION: State = State {
    code: "25P02",
    name: "IN_FAILED_SQL_TRANSACTION",
    kind: Kind::Error,
    message: Some("in failed sql transaction"),
};
/// idle in transaction session timeout
pub const IDLE_IN_TRANSACTION_SESSION_TIMEOUT: State = State {
    code: "25P03",
    name: "IDLE_IN_TRANSACTION_SESSION_TIMEOUT",
    kind: Kind::Error,
    message: Some("idle in transaction session timeout"),
};

pub const UNDEFINED_PSTATEMENT: State = State {
    code: "26000",
    name: "UNDEFINED_PSTATEMENT",
    kind: Kind::Error,
    message: None,
};
/// triggered data change violation
pub const TRIGGERED_DATA_CHANGE_VIOLATION: State = State {
    code: "27000",
    name: "TRIGGERED_DATA_CHANGE_VIOLATION",
    kind: Kind::Error,
    message: Some("triggered data change violation"),
};
/// invalid authorization specification
pub const INVALID_AUTHORIZATION_SPECIFICATION: State = State {
    code: "28000",
    name: "INVALID_AUTHORIZATION_SPECIFICATION",
    kind: Kind::Error,
    message: Some("invalid authorization specification"),
};
/// invalid password
pub const INVALID_PASSWORD: State = State {
    code: "28P01",
    name: "INVALID_PASSWORD",
    kind: Kind::Error,
    message: Some("invalid password"),
};
/// dependent privilege descriptors still exist
pub const DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST: State = State {
    code: "2B000",
    name: "DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST",
    kind: Kind::Error,
    message: Some("dependent privilege descriptors still exist"),
};
/// dependent objects still exist
pub const DEPENDENT_OBJECTS_STILL_EXIST: State = State {
    code: "2BP01",
    name: "DEPENDENT_OBJECTS_STILL_EXIST",
    kind: Kind::Error,
    message: Some("dependent objects still exist"),
};
/// invalid transaction termination
pub const INVALID_TRANSACTION_TERMINATION: State = State {
    code: "2D000",
    name: "INVALID_TRANSACTION_TERMINATION",
    kind: Kind::Error,
    message: Some("invalid transaction termination"),
};
/// sql routine exception
pub const SQL_ROUTINE_EXCEPTION: State = State {
    code: "2F000",
    name: "SQL_ROUTINE_EXCEPTION",
    kind: Kind::Error,
    message: Some("sql routine exception"),
};
/// modifying sql data not permitted
pub const S_R_E_MODIFYING_SQL_DATA_NOT_PERMITTED: State = State {
    code: "2F002",
    name: "S_R_E_MODIFYING_SQL_DATA_NOT_PERMITTED",
    kind: Kind::Error,
    message: Some("modifying sql data not permitted"),
};
/// prohibited sql statement attempted
pub const S_R_E_PROHIBITED_SQL_STATEMENT_ATTEMPTED: State = State {
    code: "2F003",
    name: "S_R_E_PROHIBITED_SQL_STATEMENT_ATTEMPTED",
    kind: Kind::Error,
    message: Some("prohibited sql statement attempted"),
};
/// reading sql data not permitted
pub const S_R_E_READING_SQL_DATA_NOT_PERMITTED: State = State {
    code: "2F004",
    name: "S_R_E_READING_SQL_DATA_NOT_PERMITTED",
    kind: Kind::Error,
    message: Some("reading sql data not permitted"),
};
/// function executed no return statement
pub const S_R_E_FUNCTION_EXECUTED_NO_RETURN_STATEMENT: State = State {
    code: "2F005",
    name: "S_R_E_FUNCTION_EXECUTED_NO_RETURN_STATEMENT",
    kind: Kind::Error,
    message: Some("function executed no return statement"),
};

pub const UNDEFINED_CURSOR: State = State {
    code: "34000",
    name: "UNDEFINED_CURSOR",
    kind: Kind::Error,
    message: None,
};
/// external routine exception
pub const EXTERNAL_ROUTINE_EXCEPTION: State = State {
    code: "38000",
    name: "EXTERNAL_ROUTINE_EXCEPTION",
    kind: Kind::Error,
    message: Some("external routine exception"),
};
/// containing sql not permitted
pub const E_R_E_CONTAINING_SQL_NOT_PERMITTED: State = State {
    code: "38001",
    name: "E_R_E_CONTAINING_SQL_NOT_PERMITTED",
    kind: Kind::Error,
    message: Some("containing sql not permitted"),
};
/// modifying sql data not permitted
pub const E_R_E_MODIFYING_SQL_DATA_NOT_PERMITTED: State = State {
    code: "38002",
    name: "E_R_E_MODIFYING_SQL_DATA_NOT_PERMITTED",
    kind: Kind::Error,
    message: Some("modifying sql data not permitted"),
};
/// prohibited sql statement attempted
pub const E_R_E_PROHIBITED_SQL_STATEMENT_ATTEMPTED: State = State {
    code: "38003",
    name: "E_R_E_PROHIBITED_SQL_STATEMENT_ATTEMPTED",
    kind: Kind::Error,
    message: Some("prohibited sql statement attempted"),
};
/// reading sql data not permitted
pub const E_R_E_READING_SQL_DATA_NOT_PERMITTED: State = State {
    code: "38004",
    name: "E_R_E_READING_SQL_DATA_NOT_PERMITTED",
    kind: Kind::Error,
    message: Some("reading sql data not permitted"),
};
/// external routine invocation exception
pub const EXTERNAL_ROUTINE_INVOCATION_EXCEPTION: State = State {
    code: "39000",
    name: "EXTERNAL_ROUTINE_INVOCATION_EXCEPTION",
    kind: Kind::Error,
    message: Some("external routine invocation exception"),
};
/// invalid sqlstate returned
pub const E_R_I_E_INVALID_SQLSTATE_RETURNED: State = State {
    code: "39001",
    name: "E_R_I_E_INVALID_SQLSTATE_RETURNED",
    kind: Kind::Error,
    message: Some("invalid sqlstate returned"),
};
/// null value not allowed
pub const E_R_I_E_NULL_VALUE_NOT_ALLOWED: State = State {
    code: "39004",
    name: "E_R_I_E_NULL_VALUE_NOT_ALLOWED",
    kind: Kind::Error,
    message: Some("null value not allowed"),
};
/// trigger protocol violated
pub const E_R_I_E_TRIGGER_PROTOCOL_VIOLATED: State = State {
    code: "39P01",
    name: "E_R_I_E_TRIGGER_PROTOCOL_VIOLATED",
    kind: Kind::Error,
    message: Some("trigger protocol violated"),
};
/// srf protocol violated
pub const E_R_I_E_SRF_PROTOCOL_VIOLATED: State = State {
    code: "39P02",
    name: "E_R_I_E_SRF_PROTOCOL_VIOLATED",
    kind: Kind::Error,
    message: Some("srf protocol violated"),
};
/// event trigger protocol violated
pub const E_R_I_E_EVENT_TRIGGER_PROTOCOL_VIOLATED: State = State {
    code: "39P03",
    name: "E_R_I_E_EVENT_TRIGGER_PROTOCOL_VIOLATED",
    kind: Kind::Error,
    message: Some("event trigger protocol violated"),
};
/// savepoint exception
pub const SAVEPOINT_EXCEPTION: State = State {
    code: "3B000",
    name: "SAVEPOINT_EXCEPTION",
    kind: Kind::Error,
    message: Some("savepoint exception"),
};
/// invalid savepoint specification
pub const S_E_INVALID_SPECIFICATION: State = State {
    code: "3B001",
    name: "S_E_INVALID_SPECIFICATION",
    kind: Kind::Error,
    message: Some("invalid savepoint specification"),
};

pub const UNDEFINED_DATABASE: State = State {
    code: "3D000",
    name: "UNDEFINED_DATABASE",
    kind: Kind::Error,
    message: None,
};

pub const UNDEFINED_SCHEMA: State = State {
    code: "3F000",
    name: "UNDEFINED_SCHEMA",
    kind: Kind::Error,
    message: None,
};
/// transaction rollback
pub const TRANSACTION_ROLLBACK: State = State {
    code: "40000",
    name: "TRANSACTION_ROLLBACK",
    kind: Kind::Error,
    message: Some("transaction rollback"),
};
/// serialization failure
pub const T_R_SERIALIZATION_FAILURE: State = State {
    code: "40001",
    name: "T_R_SERIALIZATION_FAILURE",
    kind: Kind::Error,
    message: Some("serialization failure"),
};
/// transaction integrity constraint violation
pub const T_R_INTEGRITY_CONSTRAINT_VIOLATION: State = State {
    code: "40002",
    name: "T_R_INTEGRITY_CONSTRAINT_VIOLATION",
    kind: Kind::Error,
    message: Some("transaction integrity constraint violation"),
};
/// statement completion unknown
pub const T_R_STATEMENT_COMPLETION_UNKNOWN: State = State {
    code: "40003",
    name: "T_R_STATEMENT_COMPLETION_UNKNOWN",
    kind: Kind::Error,
    message: Some("statement completion unknown"),
};
/// deadlock detected
pub const T_R_DEADLOCK_DETECTED: State = State {
    code: "40P01",
    name: "T_R_DEADLOCK_DETECTED",
    kind: Kind::Error,
    message: Some("deadlock detected"),
};
/// syntax error or access rule violation
pub const SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION: State = State {
    code: "42000",
    name: "SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION",
    kind: Kind::Error,
    message: Some("syntax error or access rule violation"),
};
/// insufficient privilege
pub const INSUFFICIENT_PRIVILEGE: State = State {
    code: "42501",
    name: "INSUFFICIENT_PRIVILEGE",
    kind: Kind::Error,
    message: Some("insufficient privilege"),
};
/// syntax error
pub const SYNTAX_ERROR: State = State {
    code: "42601",
    name: "SYNTAX_ERROR",
    kind: Kind::Error,
    message: Some("syntax error"),
};
/// invalid name
pub const INVALID_NAME: State = State {
    code: "42602",
    name: "INVALID_NAME",
    kind: Kind::Error,
    message: Some("invalid name"),
};
/// invalid column definition
pub const INVALID_COLUMN_DEFINITION: State = State {
    code: "42611",
    name: "INVALID_COLUMN_DEFINITION",
    kind: Kind::Error,
    message: Some("invalid column definition"),
};
/// name too long
pub const NAME_TOO_LONG: State = State {
    code: "42622",
    name: "NAME_TOO_LONG",
    kind: Kind::Error,
    message: Some("name too long"),
};
/// duplicate column
pub const DUPLICATE_COLUMN: State = State {
    code: "42701",
    name: "DUPLICATE_COLUMN",
    kind: Kind::Error,
    message: Some("duplicate column"),
};
/// ambiguous column
pub const AMBIGUOUS_COLUMN: State = State {
    code: "42702",
    name: "AMBIGUOUS_COLUMN",
    kind: Kind::Error,
    message: Some("ambiguous column"),
};
/// undefined column
pub const UNDEFINED_COLUMN: State = State {
    code: "42703",
    name: "UNDEFINED_COLUMN",
    kind: Kind::Error,
    message: Some("undefined column"),
};
/// undefined object
pub const UNDEFINED_OBJECT: State = State {
    code: "42704",
    name: "UNDEFINED_OBJECT",
    kind: Kind::Error,
    message: Some("undefined object"),
};
/// duplicate object
pub const DUPLICATE_OBJECT: State = State {
    code: "42710",
    name: "DUPLICATE_OBJECT",
    kind: Kind::Error,
    message: Some("duplicate object"),
};
/// duplicate alias
pub const DUPLICATE_ALIAS: State = State {
    code: "42712",
    name: "DUPLICATE_ALIAS",
    kind: Kind::Error,
    message: Some("duplicate alias"),
};
/// duplicate function
pub const DUPLICATE_FUNCTION: State = State {
    code: "42723",
    name: "DUPLICATE_FUNCTION",
    kind: Kind::Error,
    message: Some("duplicate function"),
};
/// ambiguous function
pub const AMBIGUOUS_FUNCTION: State = State {
    code: "42725",
    name: "AMBIGUOUS_FUNCTION",
    kind: Kind::Error,
    message: Some("ambiguous function"),
};
/// grouping error
pub const GROUPING_ERROR: State = State {
    code: "42803",
    name: "GROUPING_ERROR",
    kind: Kind::Error,
    message: Some("grouping error"),
};
/// datatype mismatch
pub const DATATYPE_MISMATCH: State = State {
    code: "42804",
    name: "DATATYPE_MISMATCH",
    kind: Kind::Error,
    message: Some("datatype mismatch"),
};
/// wrong object type
pub const WRONG_OBJECT_TYPE: State = State {
    code: "42809",
    name: "WRONG_OBJECT_TYPE",
    kind: Kind::Error,
    message: Some("wrong object type"),
};
/// invalid foreign key
pub const INVALID_FOREIGN_KEY: State = State {
    code: "42830",
    name: "INVALID_FOREIGN_KEY",
    kind: Kind::Error,
    message: Some("invalid foreign key"),
};
/// cannot coerce
pub const CANNOT_COERCE: State = State {
    code: "42846",
    name: "CANNOT_COERCE",
    kind: Kind::Error,
    message: Some("cannot coerce"),
};
/// undefined function
pub const UNDEFINED_FUNCTION: State = State {
    code: "42883",
    name: "UNDEFINED_FUNCTION",
    kind: Kind::Error,
    message: Some("undefined function"),
};
/// generated always
pub const GENERATED_ALWAYS: State = State {
    code: "428C9",
    name: "GENERATED_ALWAYS",
    kind: Kind::Error,
    message: Some("generated always"),
};
/// reserved name
pub const RESERVED_NAME: State = State {
    code: "42939",
    name: "RESERVED_NAME",
    kind: Kind::Error,
    message: Some("reserved name"),
};
/// undefined table
pub const UNDEFINED_TABLE: State = State {
    code: "42P01",
    name: "UNDEFINED_TABLE",
    kind: Kind::Error,
    message: Some("undefined table"),
};
/// undefined parameter
pub const UNDEFINED_PARAMETER: State = State {
    code: "42P02",
    name: "UNDEFINED_PARAMETER",
    kind: Kind::Error,
    message: Some("undefined parameter"),
};
/// duplicate cursor
pub const DUPLICATE_CURSOR: State = State {
    code: "42P03",
    name: "DUPLICATE_CURSOR",
    kind: Kind::Error,
    message: Some("duplicate cursor"),
};
/// duplicate database
pub const DUPLICATE_DATABASE: State = State {
    code: "42P04",
    name: "DUPLICATE_DATABASE",
    kind: Kind::Error,
    message: Some("duplicate database"),
};
/// duplicate prepared statement
pub const DUPLICATE_PSTATEMENT: State = State {
    code: "42P05",
    name: "DUPLICATE_PSTATEMENT",
    kind: Kind::Error,
    message: Some("duplicate prepared statement"),
};
/// duplicate schema
pub const DUPLICATE_SCHEMA: State = State {
    code: "42P06",
    name: "DUPLICATE_SCHEMA",
    kind: Kind::Error,
    message: Some("duplicate schema"),
};
/// duplicate table
pub const DUPLICATE_TABLE: State = State {
    code: "42P07",
    name: "DUPLICATE_TABLE",
    kind: Kind::Error,
    message: Some("duplicate table"),
};
/// ambiguous parameter
pub const AMBIGUOUS_PARAMETER: State = State {
    code: "42P08",
    name: "AMBIGUOUS_PARAMETER",
    kind: Kind::Error,
    message: Some("ambiguous parameter"),
};
/// ambiguous alias
pub const AMBIGUOUS_ALIAS: State = State {
    code: "42P09",
    name: "AMBIGUOUS_ALIAS",
    kind: Kind::Error,
    message: Some("ambiguous alias"),
};
/// invalid column reference
pub const INVALID_COLUMN_REFERENCE: State = State {
    code: "42P10",
    name: "INVALID_COLUMN_REFERENCE",
    kind: Kind::Error,
    message: Some("invalid column reference"),
};
/// invalid cursor definition
pub const INVALID_CURSOR_DEFINITION: State = State {
    code: "42P11",
    name: "INVALID_CURSOR_DEFINITION",
    kind: Kind::Error,
    message: Some("invalid cursor definition"),
};
/// invalid database definition
pub const INVALID_DATABASE_DEFINITION: State = State {
    code: "42P12",
    name: "INVALID_DATABASE_DEFINITION",
    kind: Kind::Error,
    message: Some("invalid database definition"),
};
/// invalid function definition
pub const INVALID_FUNCTION_DEFINITION: State = State {
    code: "42P13",
    name: "INVALID_FUNCTION_DEFINITION",
    kind: Kind::Error,
    message: Some("invalid function definition"),
};
/// invalid prepared statement definition
pub const INVALID_PSTATEMENT_DEFINITION: State = State {
    code: "42P14",
    name: "INVALID_PSTATEMENT_DEFINITION",
    kind: Kind::Error,
    message: Some("invalid prepared statement definition"),
};
/// invalid schema definition
pub const INVALID_SCHEMA_DEFINITION: State = State {
    code: "42P15",
    name: "INVALID_SCHEMA_DEFINITION",
    kind: Kind::Error,
    message: Some("invalid schema definition"),
};
/// invalid table definition
pub const INVALID_TABLE_DEFINITION: State = State {
    code: "42P16",
    name: "INVALID_TABLE_DEFINITION",
    kind: Kind::Error,
    message: Some("invalid table definition"),
};
/// invalid object definition
pub const INVALID_OBJECT_DEFINITION: State = State {
    code: "42P17",
    name: "INVALID_OBJECT_DEFINITION",
    kind: Kind::Error,
    message: Some("invalid object definition"),
};
/// indeterminate datatype
pub const INDETERMINATE_DATATYPE: State = State {
    code: "42P18",
    name: "INDETERMINATE_DATATYPE",
    kind: Kind::Error,
    message: Some("indeterminate datatype"),
};
/// invalid recursion
pub const INVALID_RECURSION: State = State {
    code: "42P19",
    name: "INVALID_RECURSION",
    kind: Kind::Error,
    message: Some("invalid recursion"),
};
/// windowing error
pub const WINDOWING_ERROR: State = State {
    code: "42P20",
    name: "WINDOWING_ERROR",
    kind: Kind::Error,
    message: Some("windowing error"),
};
/// collation mismatch
pub const COLLATION_MISMATCH: State = State {
    code: "42P21",
    name: "COLLATION_MISMATCH",
    kind: Kind::Error,
    message: Some("collation mismatch"),
};
/// indeterminate collation
pub const INDETERMINATE_COLLATION: State = State {
    code: "42P22",
    name: "INDETERMINATE_COLLATION",
    kind: Kind::Error,
    message: Some("indeterminate collation"),
};
/// with check option violation
pub const WITH_CHECK_OPTION_VIOLATION: State = State {
    code: "44000",
    name: "WITH_CHECK_OPTION_VIOLATION",
    kind: Kind::Error,
    message: Some("with check option violation"),
};
/// insufficient resources
pub const INSUFFICIENT_RESOURCES: State = State {
    code: "53000",
    name: "INSUFFICIENT_RESOURCES",
    kind: Kind::Error,
    message: Some("insufficient resources"),
};
/// disk full
pub const DISK_FULL: State = State {
    code: "53100",
    name: "DISK_FULL",
    kind: Kind::Error,
    message: Some("disk full"),
};
/// out of memory
pub const OUT_OF_MEMORY: State = State {
    code: "53200",
    name: "OUT_OF_MEMORY",
    kind: Kind::Error,
    message: Some("out of memory"),
};
/// too many connections
pub const TOO_MANY_CONNECTIONS: State = State {
    code: "53300",
    name: "TOO_MANY_CONNECTIONS",
    kind: Kind::Error,
    message: Some("too many connections"),
};
/// configuration limit exceeded
pub const CONFIGURATION_LIMIT_EXCEEDED: State = State {
    code: "53400",
    name: "CONFIGURATION_LIMIT_EXCEEDED",
    kind: Kind::Error,
    message: Some("configuration limit exceeded"),
};
/// program limit exceeded
pub const PROGRAM_LIMIT_EXCEEDED: State = State {
    code: "54000",
    name: "PROGRAM_LIMIT_EXCEEDED",
    kind: Kind::Error,
    message: Some("program limit exceeded"),
};
/// statement too complex
pub const STATEMENT_TOO_COMPLEX: State = State {
    code: "54001",
    name: "STATEMENT_TOO_COMPLEX",
    kind: Kind::Error,
    message: Some("statement too complex"),
};
/// too many columns
pub const TOO_MANY_COLUMNS: State = State {
    code: "54011",
    name: "TOO_MANY_COLUMNS",
    kind: Kind::Error,
    message: Some("too many columns"),
};
/// too many arguments
pub const TOO_MANY_ARGUMENTS: State = State {
    code: "54023",
    name: "TOO_MANY_ARGUMENTS",
    kind: Kind::Error,
    message: Some("too many arguments"),
};
/// object not in prerequisite state
pub const OBJECT_NOT_IN_PREREQUISITE_STATE: State = State {
    code: "55000",
    name: "OBJECT_NOT_IN_PREREQUISITE_STATE",
    kind: Kind::Error,
    message: Some("object not in prerequisite state"),
};
/// object in use
pub const OBJECT_IN_USE: State = State {
    code: "55006",
    name: "OBJECT_IN_USE",
    kind: Kind::Error,
    message: Some("object in use"),
};
/// cant change runtime param
pub const CANT_CHANGE_RUNTIME_PARAM: State = State {
    code: "55P02",
    name: "CANT_CHANGE_RUNTIME_PARAM",
    kind: Kind::Error,
    message: Some("cant change runtime param"),
};
/// lock not available
pub const LOCK_NOT_AVAILABLE: State = State {
    code: "55P03",
    name: "LOCK_NOT_AVAILABLE",
    kind: Kind::Error,
    message: Some("lock not available"),
};
/// unsafe new enum value usage
pub const UNSAFE_NEW_ENUM_VALUE_USAGE: State = State {
    code: "55P04",
    name: "UNSAFE_NEW_ENUM_VALUE_USAGE",
    kind: Kind::Error,
    message: Some("unsafe new enum value usage"),
};
/// operator intervention
pub const OPERATOR_INTERVENTION: State = State {
    code: "57000",
    name: "OPERATOR_INTERVENTION",
    kind: Kind::Error,
    message: Some("operator intervention"),
};
/// query canceled
pub const QUERY_CANCELED: State = State {
    code: "57014",
    name: "QUERY_CANCELED",
    kind: Kind::Error,
    message: Some("query canceled"),
};
/// admin shutdown
pub const ADMIN_SHUTDOWN: State = State {
    code: "57P01",
    name: "ADMIN_SHUTDOWN",
    kind: Kind::Error,
    message: Some("admin shutdown"),
};
/// crash shutdown
pub const CRASH_SHUTDOWN: State = State {
    code: "57P02",
    name: "CRASH_SHUTDOWN",
    kind: Kind::Error,
    message: Some("crash shutdown"),
};
/// cannot connect now
pub const CANNOT_CONNECT_NOW: State = State {
    code: "57P03",
    name: "CANNOT_CONNECT_NOW",
    kind: Kind::Error,
    message: Some("cannot connect now"),
};
/// database dropped
pub const DATABASE_DROPPED: State = State {
    code: "57P04",
    name: "DATABASE_DROPPED",
    kind: Kind::Error,
    message: Some("database dropped"),
};
/// idle session timeout
pub const IDLE_SESSION_TIMEOUT: State = State {
    code: "57P05",
    name: "IDLE_SESSION_TIMEOUT",
    kind: Kind::Error,
    message: Some("idle session timeout"),
};
/// system error
pub const SYSTEM_ERROR: State = State {
    code: "58000",
    name: "SYSTEM_ERROR",
    kind: Kind::Error,
    message: Some("system error"),
};
/// io error
pub const IO_ERROR: State = State {
    code: "58030",
    name: "IO_ERROR",
    kind: Kind::Error,
    message: Some("io error"),
};
/// undefined file
pub const UNDEFINED_FILE: State = State {
    code: "58P01",
    name: "UNDEFINED_FILE",
    kind: Kind::Error,
    message: Some("undefined file"),
};
/// duplicate file
pub const DUPLICATE_FILE: State = State {
    code: "58P02",
    name: "DUPLICATE_FILE",
    kind: Kind::Error,
    message: Some("duplicate file"),
};
/// snapshot too old
pub const SNAPSHOT_TOO_OLD: State = State {
    code: "72000",
    name: "SNAPSHOT_TOO_OLD",
    kind: Kind::Error,
    message: Some("snapshot too old"),
};
/// config file error
pub const CONFIG_FILE_ERROR: State = State {
    code: "F0000",
    name: "CONFIG_FILE_ERROR",
    kind: Kind::Error,
    message: Some("config file error"),
};
/// lock file exists
pub const LOCK_FILE_EXISTS: State = State {
    code: "F0001",
    name: "LOCK_FILE_EXISTS",
    kind: Kind::Error,
    message: Some("lock file exists"),
};
/// fdw error
pub const FDW_ERROR: State = State {
    code: "HV000",
    name: "FDW_ERROR",
    kind: Kind::Error,
    message: Some("fdw error"),
};
/// fdw out of memory
pub const FDW_OUT_OF_MEMORY: State = State {
    code: "HV001",
    name: "FDW_OUT_OF_MEMORY",
    kind: Kind::Error,
    message: Some("fdw out of memory"),
};
/// fdw dynamic parameter value needed
pub const FDW_DYNAMIC_PARAMETER_VALUE_NEEDED: State = State {
    code: "HV002",
    name: "FDW_DYNAMIC_PARAMETER_VALUE_NEEDED",
    kind: Kind::Error,
    message: Some("fdw dynamic parameter value needed"),
};
/// fdw invalid data type
pub const FDW_INVALID_DATA_TYPE: State = State {
    code: "HV004",
    name: "FDW_INVALID_DATA_TYPE",
    kind: Kind::Error,
    message: Some("fdw invalid data type"),
};
/// fdw column name not found
pub const FDW_COLUMN_NAME_NOT_FOUND: State = State {
    code: "HV005",
    name: "FDW_COLUMN_NAME_NOT_FOUND",
    kind: Kind::Error,
    message: Some("fdw column name not found"),
};
/// fdw invalid data type descriptors
pub const FDW_INVALID_DATA_TYPE_DESCRIPTORS: State = State {
    code: "HV006",
    name: "FDW_INVALID_DATA_TYPE_DESCRIPTORS",
    kind: Kind::Error,
    message: Some("fdw invalid data type descriptors"),
};
/// fdw invalid column name
pub const FDW_INVALID_COLUMN_NAME: State = State {
    code: "HV007",
    name: "FDW_INVALID_COLUMN_NAME",
    kind: Kind::Error,
    message: Some("fdw invalid column name"),
};
/// fdw invalid column number
pub const FDW_INVALID_COLUMN_NUMBER: State = State {
    code: "HV008",
    name: "FDW_INVALID_COLUMN_NUMBER",
    kind: Kind::Error,
    message: Some("fdw invalid column number"),
};
/// fdw invalid use of null pointer
pub const FDW_INVALID_USE_OF_NULL_POINTER: State = State {
    code: "HV009",
    name: "FDW_INVALID_USE_OF_NULL_POINTER",
    kind: Kind::Error,
    message: Some("fdw invalid use of null pointer"),
};
/// fdw invalid string format
pub const FDW_INVALID_STRING_FORMAT: State = State {
    code: "HV00A",
    name: "FDW_INVALID_STRING_FORMAT",
    kind: Kind::Error,
    message: Some("fdw invalid string format"),
};
/// fdw invalid handle
pub const FDW_INVALID_HANDLE: State = State {
    code: "HV00B",
    name: "FDW_INVALID_HANDLE",
    kind: Kind::Error,
    message: Some("fdw invalid handle"),
};
/// fdw invalid option index
pub const FDW_INVALID_OPTION_INDEX: State = State {
    code: "HV00C",
    name: "FDW_INVALID_OPTION_INDEX",
    kind: Kind::Error,
    message: Some("fdw invalid option index"),
};
/// fdw invalid option name
pub const FDW_INVALID_OPTION_NAME: State = State {
    code: "HV00D",
    name: "FDW_INVALID_OPTION_NAME",
    kind: Kind::Error,
    message: Some("fdw invalid option name"),
};
/// fdw option name not found
pub const FDW_OPTION_NAME_NOT_FOUND: State = State {
    code: "HV00J",
    name: "FDW_OPTION_NAME_NOT_FOUND",
    kind: Kind::Error,
    message: Some("fdw option name not found"),
};
/// fdw reply handle
pub const FDW_REPLY_HANDLE: State = State {
    code: "HV00K",
    name: "FDW_REPLY_HANDLE",
    kind: Kind::Error,
    message: Some("fdw reply handle"),
};
/// fdw unable to create execution
pub const FDW_UNABLE_TO_CREATE_EXECUTION: State = State {
    code: "HV00L",
    name: "FDW_UNABLE_TO_CREATE_EXECUTION",
    kind: Kind::Error,
    message: Some("fdw unable to create execution"),
};
/// fdw unable to create reply
pub const FDW_UNABLE_TO_CREATE_REPLY: State = State {
    code: "HV00M",
    name: "FDW_UNABLE_TO_CREATE_REPLY",
    kind: Kind::Error,
    message: Some("fdw unable to create reply"),
};
/// fdw unable to establish connection
pub const FDW_UNABLE_TO_ESTABLISH_CONNECTION: State = State {
    code: "HV00N",
    name: "FDW_UNABLE_TO_ESTABLISH_CONNECTION",
    kind: Kind::Error,
    message: Some("fdw unable to establish connection"),
};
/// fdw no schemas
pub const FDW_NO_SCHEMAS: State = State {
    code: "HV00P",
    name: "FDW_NO_SCHEMAS",
    kind: Kind::Error,
    message: Some("fdw no schemas"),
};
/// fdw schema not found
pub const FDW_SCHEMA_NOT_FOUND: State = State {
    code: "HV00Q",
    name: "FDW_SCHEMA_NOT_FOUND",
    kind: Kind::Error,
    message: Some("fdw schema not found"),
};
/// fdw table not found
pub const FDW_TABLE_NOT_FOUND: State = State {
    code: "HV00R",
    name: "FDW_TABLE_NOT_FOUND",
    kind: Kind::Error,
    message: Some("fdw table not found"),
};
/// fdw function sequence error
pub const FDW_FUNCTION_SEQUENCE_ERROR: State = State {
    code: "HV010",
    name: "FDW_FUNCTION_SEQUENCE_ERROR",
    kind: Kind::Error,
    message: Some("fdw function sequence error"),
};
/// fdw too many handles
pub const FDW_TOO_MANY_HANDLES: State = State {
    code: "HV014",
    name: "FDW_TOO_MANY_HANDLES",
    kind: Kind::Error,
    message: Some("fdw too many handles"),
};
/// fdw inconsistent descriptor information
pub const FDW_INCONSISTENT_DESCRIPTOR_INFORMATION: State = State {
    code: "HV021",
    name: "FDW_INCONSISTENT_DESCRIPTOR_INFORMATION",
    kind: Kind::Error,
    message: Some("fdw inconsistent descriptor information"),
};
/// fdw invalid attribute value
pub const FDW_INVALID_ATTRIBUTE_VALUE: State = State {
    code: "HV024",
    name: "FDW_INVALID_ATTRIBUTE_VALUE",
    kind: Kind::Error,
    message: Some("fdw invalid attribute value"),
};
/// fdw invalid string length or buffer length
pub const FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH: State = State {
    code: "HV090",
    name: "FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH",
    kind: Kind::Error,
    message: Some("fdw invalid string length or buffer length"),
};
/// fdw invalid descriptor field identifier
pub const FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER: State = State {
    code: "HV091",
    name: "FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER",
    kind: Kind::Error,
    message: Some("fdw invalid descriptor field identifier"),
};
/// plpgsql error
pub const PLPGSQL_ERROR: State = State {
    code: "P0000",
    name: "PLPGSQL_ERROR",
    kind: Kind::Error,
    message: Some("plpgsql error"),
};
/// raise exception
pub const RAISE_EXCEPTION: State = State {
    code: "P0001",
    name: "RAISE_EXCEPTION",
    kind: Kind::Error,
    message: Some("raise exception"),
};
/// no data found
pub const NO_DATA_FOUND: State = State {
    code: "P0002",
    name: "NO_DATA_FOUND",
    kind: Kind::Error,
    message: Some("no data found"),
};
/// too many rows
pub const TOO_MANY_ROWS: State = State {
    code: "P0003",
    name: "TOO_MANY_ROWS",
    kind: Kind::Error,
    message: Some("too many rows"),
};
/// assert failure
pub const ASSERT_FAILURE: State = State {
    code: "P0004",
    name: "ASSERT_FAILURE",
    kind: Kind::Error,
    message: Some("assert failure"),
};
/// internal error
pub const INTERNAL_ERROR: State = State {
    code: "XX000",
    name: "INTERNAL_ERROR",
    kind: Kind::Error,
    message: Some("internal error"),
};
/// data corrupted
pub const DATA_CORRUPTED: State = State {
    code: "XX001",
    name: "DATA_CORRUPTED",
    kind: Kind::Error,
    message: Some("data corrupted"),
};
/// index corrupted
pub const INDEX_CORRUPTED: State = State {
    code: "XX002",
    name: "INDEX_CORRUPTED",
    kind: Kind::Error,
    message: Some("index corrupted"),
};

impl State {
    /// Creates a `State` from its error code.
    pub fn from_code(s: &str) -> State {
        match s {
            "00000" => SUCCESSFUL_COMPLETION,
            "01000" => WARNING,
            "01003" => WARNING_NULL_VALUE_ELIMINATED_IN_SET_FUNCTION,
            "01004" => WARNING_STRING_DATA_RIGHT_TRUNCATION,
            "01006" => WARNING_PRIVILEGE_NOT_REVOKED,
            "01007" => WARNING_PRIVILEGE_NOT_GRANTED,
            "01008" => WARNING_IMPLICIT_ZERO_BIT_PADDING,
            "0100C" => WARNING_DYNAMIC_RESULT_SETS_RETURNED,
            "01P01" => WARNING_DEPRECATED_FEATURE,
            "02000" => NO_DATA,
            "02001" => NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED,
            "03000" => SQL_STATEMENT_NOT_YET_COMPLETE,
            "08000" => CONNECTION_EXCEPTION,
            "08001" => SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION,
            "08003" => CONNECTION_DOES_NOT_EXIST,
            "08004" => SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION,
            "08006" => CONNECTION_FAILURE,
            "08007" => TRANSACTION_RESOLUTION_UNKNOWN,
            "08P01" => PROTOCOL_VIOLATION,
            "09000" => TRIGGERED_ACTION_EXCEPTION,
            "0A000" => FEATURE_NOT_SUPPORTED,
            "0B000" => INVALID_TRANSACTION_INITIATION,
            "0F000" => LOCATOR_EXCEPTION,
            "0F001" => L_E_INVALID_SPECIFICATION,
            "0L000" => INVALID_GRANTOR,
            "0LP01" => INVALID_GRANT_OPERATION,
            "0P000" => INVALID_ROLE_SPECIFICATION,
            "0Z000" => DIAGNOSTICS_EXCEPTION,
            "0Z002" => STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER,
            "20000" => CASE_NOT_FOUND,
            "21000" => CARDINALITY_VIOLATION,
            "22000" => DATA_EXCEPTION,
            "22001" => STRING_DATA_RIGHT_TRUNCATION,
            "22002" => NULL_VALUE_NO_INDICATOR_PARAMETER,
            "22003" => NUMERIC_VALUE_OUT_OF_RANGE,
            "22004" => NULL_VALUE_NOT_ALLOWED,
            "22005" => ERROR_IN_ASSIGNMENT,
            "22007" => INVALID_DATETIME_FORMAT,
            "22008" => DATETIME_VALUE_OUT_OF_RANGE,
            "22009" => INVALID_TIME_ZONE_DISPLACEMENT_VALUE,
            "2200B" => ESCAPE_CHARACTER_CONFLICT,
            "2200C" => INVALID_USE_OF_ESCAPE_CHARACTER,
            "2200D" => INVALID_ESCAPE_OCTET,
            "2200F" => ZERO_LENGTH_CHARACTER_STRING,
            "2200G" => MOST_SPECIFIC_TYPE_MISMATCH,
            "2200H" => SEQUENCE_GENERATOR_LIMIT_EXCEEDED,
            "2200L" => NOT_AN_XML_DOCUMENT,
            "2200M" => INVALID_XML_DOCUMENT,
            "2200N" => INVALID_XML_CONTENT,
            "2200S" => INVALID_XML_COMMENT,
            "2200T" => INVALID_XML_PROCESSING_INSTRUCTION,
            "22010" => INVALID_INDICATOR_PARAMETER_VALUE,
            "22011" => SUBSTRING_ERROR,
            "22012" => DIVISION_BY_ZERO,
            "22013" => INVALID_PRECEDING_OR_FOLLOWING_SIZE,
            "22014" => INVALID_ARGUMENT_FOR_NTILE,
            "22015" => INTERVAL_FIELD_OVERFLOW,
            "22016" => INVALID_ARGUMENT_FOR_NTH_VALUE,
            "22018" => INVALID_CHARACTER_VALUE_FOR_CAST,
            "22019" => INVALID_ESCAPE_CHARACTER,
            "2201B" => INVALID_REGULAR_EXPRESSION,
            "2201E" => INVALID_ARGUMENT_FOR_LOG,
            "2201F" => INVALID_ARGUMENT_FOR_POWER_FUNCTION,
            "2201G" => INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION,
            "2201W" => INVALID_ROW_COUNT_IN_LIMIT_CLAUSE,
            "2201X" => INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE,
            "22021" => CHARACTER_NOT_IN_REPERTOIRE,
            "22022" => INDICATOR_OVERFLOW,
            "22023" => INVALID_PARAMETER_VALUE,
            "22024" => UNTERMINATED_C_STRING,
            "22025" => INVALID_ESCAPE_SEQUENCE,
            "22026" => STRING_DATA_LENGTH_MISMATCH,
            "22027" => TRIM_ERROR,
            "2202E" => ARRAY_SUBSCRIPT_ERROR,
            "2202G" => INVALID_TABLESAMPLE_REPEAT,
            "2202H" => INVALID_TABLESAMPLE_ARGUMENT,
            "22030" => DUPLICATE_JSON_OBJECT_KEY_VALUE,
            "22031" => INVALID_ARGUMENT_FOR_SQL_JSON_DATETIME_FUNCTION,
            "22032" => INVALID_JSON_TEXT,
            "22033" => INVALID_SQL_JSON_SUBSCRIPT,
            "22034" => MORE_THAN_ONE_SQL_JSON_ITEM,
            "22035" => NO_SQL_JSON_ITEM,
            "22036" => NON_NUMERIC_SQL_JSON_ITEM,
            "22037" => NON_UNIQUE_KEYS_IN_A_JSON_OBJECT,
            "22038" => SINGLETON_SQL_JSON_ITEM_REQUIRED,
            "22039" => SQL_JSON_ARRAY_NOT_FOUND,
            "2203A" => SQL_JSON_MEMBER_NOT_FOUND,
            "2203B" => SQL_JSON_NUMBER_NOT_FOUND,
            "2203C" => SQL_JSON_OBJECT_NOT_FOUND,
            "2203D" => TOO_MANY_JSON_ARRAY_ELEMENTS,
            "2203E" => TOO_MANY_JSON_OBJECT_MEMBERS,
            "2203F" => SQL_JSON_SCALAR_REQUIRED,
            "22P01" => FLOATING_POINT_EXCEPTION,
            "22P02" => INVALID_TEXT_REPRESENTATION,
            "22P03" => INVALID_BINARY_REPRESENTATION,
            "22P04" => BAD_COPY_FILE_FORMAT,
            "22P05" => UNTRANSLATABLE_CHARACTER,
            "22P06" => NONSTANDARD_USE_OF_ESCAPE_CHARACTER,
            "23000" => INTEGRITY_CONSTRAINT_VIOLATION,
            "23001" => RESTRICT_VIOLATION,
            "23502" => NOT_NULL_VIOLATION,
            "23503" => FOREIGN_KEY_VIOLATION,
            "23505" => UNIQUE_VIOLATION,
            "23514" => CHECK_VIOLATION,
            "23P01" => EXCLUSION_VIOLATION,
            "24000" => INVALID_CURSOR_STATE,
            "25000" => INVALID_TRANSACTION_STATE,
            "25001" => ACTIVE_SQL_TRANSACTION,
            "25002" => BRANCH_TRANSACTION_ALREADY_ACTIVE,
            "25003" => INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION,
            "25004" => INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION,
            "25005" => NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION,
            "25006" => READ_ONLY_SQL_TRANSACTION,
            "25007" => SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED,
            "25008" => HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL,
            "25P01" => NO_ACTIVE_SQL_TRANSACTION,
            "25P02" => IN_FAILED_SQL_TRANSACTION,
            "25P03" => IDLE_IN_TRANSACTION_SESSION_TIMEOUT,
            "26000" => UNDEFINED_PSTATEMENT,
            "27000" => TRIGGERED_DATA_CHANGE_VIOLATION,
            "28000" => INVALID_AUTHORIZATION_SPECIFICATION,
            "28P01" => INVALID_PASSWORD,
            "2B000" => DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST,
            "2BP01" => DEPENDENT_OBJECTS_STILL_EXIST,
            "2D000" => INVALID_TRANSACTION_TERMINATION,
            "2F000" => SQL_ROUTINE_EXCEPTION,
            "2F002" => S_R_E_MODIFYING_SQL_DATA_NOT_PERMITTED,
            "2F003" => S_R_E_PROHIBITED_SQL_STATEMENT_ATTEMPTED,
            "2F004" => S_R_E_READING_SQL_DATA_NOT_PERMITTED,
            "2F005" => S_R_E_FUNCTION_EXECUTED_NO_RETURN_STATEMENT,
            "34000" => UNDEFINED_CURSOR,
            "38000" => EXTERNAL_ROUTINE_EXCEPTION,
            "38001" => E_R_E_CONTAINING_SQL_NOT_PERMITTED,
            "38002" => E_R_E_MODIFYING_SQL_DATA_NOT_PERMITTED,
            "38003" => E_R_E_PROHIBITED_SQL_STATEMENT_ATTEMPTED,
            "38004" => E_R_E_READING_SQL_DATA_NOT_PERMITTED,
            "39000" => EXTERNAL_ROUTINE_INVOCATION_EXCEPTION,
            "39001" => E_R_I_E_INVALID_SQLSTATE_RETURNED,
            "39004" => E_R_I_E_NULL_VALUE_NOT_ALLOWED,
            "39P01" => E_R_I_E_TRIGGER_PROTOCOL_VIOLATED,
            "39P02" => E_R_I_E_SRF_PROTOCOL_VIOLATED,
            "39P03" => E_R_I_E_EVENT_TRIGGER_PROTOCOL_VIOLATED,
            "3B000" => SAVEPOINT_EXCEPTION,
            "3B001" => S_E_INVALID_SPECIFICATION,
            "3D000" => UNDEFINED_DATABASE,
            "3F000" => UNDEFINED_SCHEMA,
            "40000" => TRANSACTION_ROLLBACK,
            "40001" => T_R_SERIALIZATION_FAILURE,
            "40002" => T_R_INTEGRITY_CONSTRAINT_VIOLATION,
            "40003" => T_R_STATEMENT_COMPLETION_UNKNOWN,
            "40P01" => T_R_DEADLOCK_DETECTED,
            "42000" => SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION,
            "42501" => INSUFFICIENT_PRIVILEGE,
            "42601" => SYNTAX_ERROR,
            "42602" => INVALID_NAME,
            "42611" => INVALID_COLUMN_DEFINITION,
            "42622" => NAME_TOO_LONG,
            "42701" => DUPLICATE_COLUMN,
            "42702" => AMBIGUOUS_COLUMN,
            "42703" => UNDEFINED_COLUMN,
            "42704" => UNDEFINED_OBJECT,
            "42710" => DUPLICATE_OBJECT,
            "42712" => DUPLICATE_ALIAS,
            "42723" => DUPLICATE_FUNCTION,
            "42725" => AMBIGUOUS_FUNCTION,
            "42803" => GROUPING_ERROR,
            "42804" => DATATYPE_MISMATCH,
            "42809" => WRONG_OBJECT_TYPE,
            "42830" => INVALID_FOREIGN_KEY,
            "42846" => CANNOT_COERCE,
            "42883" => UNDEFINED_FUNCTION,
            "428C9" => GENERATED_ALWAYS,
            "42939" => RESERVED_NAME,
            "42P01" => UNDEFINED_TABLE,
            "42P02" => UNDEFINED_PARAMETER,
            "42P03" => DUPLICATE_CURSOR,
            "42P04" => DUPLICATE_DATABASE,
            "42P05" => DUPLICATE_PSTATEMENT,
            "42P06" => DUPLICATE_SCHEMA,
            "42P07" => DUPLICATE_TABLE,
            "42P08" => AMBIGUOUS_PARAMETER,
            "42P09" => AMBIGUOUS_ALIAS,
            "42P10" => INVALID_COLUMN_REFERENCE,
            "42P11" => INVALID_CURSOR_DEFINITION,
            "42P12" => INVALID_DATABASE_DEFINITION,
            "42P13" => INVALID_FUNCTION_DEFINITION,
            "42P14" => INVALID_PSTATEMENT_DEFINITION,
            "42P15" => INVALID_SCHEMA_DEFINITION,
            "42P16" => INVALID_TABLE_DEFINITION,
            "42P17" => INVALID_OBJECT_DEFINITION,
            "42P18" => INDETERMINATE_DATATYPE,
            "42P19" => INVALID_RECURSION,
            "42P20" => WINDOWING_ERROR,
            "42P21" => COLLATION_MISMATCH,
            "42P22" => INDETERMINATE_COLLATION,
            "44000" => WITH_CHECK_OPTION_VIOLATION,
            "53000" => INSUFFICIENT_RESOURCES,
            "53100" => DISK_FULL,
            "53200" => OUT_OF_MEMORY,
            "53300" => TOO_MANY_CONNECTIONS,
            "53400" => CONFIGURATION_LIMIT_EXCEEDED,
            "54000" => PROGRAM_LIMIT_EXCEEDED,
            "54001" => STATEMENT_TOO_COMPLEX,
            "54011" => TOO_MANY_COLUMNS,
            "54023" => TOO_MANY_ARGUMENTS,
            "55000" => OBJECT_NOT_IN_PREREQUISITE_STATE,
            "55006" => OBJECT_IN_USE,
            "55P02" => CANT_CHANGE_RUNTIME_PARAM,
            "55P03" => LOCK_NOT_AVAILABLE,
            "55P04" => UNSAFE_NEW_ENUM_VALUE_USAGE,
            "57000" => OPERATOR_INTERVENTION,
            "57014" => QUERY_CANCELED,
            "57P01" => ADMIN_SHUTDOWN,
            "57P02" => CRASH_SHUTDOWN,
            "57P03" => CANNOT_CONNECT_NOW,
            "57P04" => DATABASE_DROPPED,
            "57P05" => IDLE_SESSION_TIMEOUT,
            "58000" => SYSTEM_ERROR,
            "58030" => IO_ERROR,
            "58P01" => UNDEFINED_FILE,
            "58P02" => DUPLICATE_FILE,
            "72000" => SNAPSHOT_TOO_OLD,
            "F0000" => CONFIG_FILE_ERROR,
            "F0001" => LOCK_FILE_EXISTS,
            "HV000" => FDW_ERROR,
            "HV001" => FDW_OUT_OF_MEMORY,
            "HV002" => FDW_DYNAMIC_PARAMETER_VALUE_NEEDED,
            "HV004" => FDW_INVALID_DATA_TYPE,
            "HV005" => FDW_COLUMN_NAME_NOT_FOUND,
            "HV006" => FDW_INVALID_DATA_TYPE_DESCRIPTORS,
            "HV007" => FDW_INVALID_COLUMN_NAME,
            "HV008" => FDW_INVALID_COLUMN_NUMBER,
            "HV009" => FDW_INVALID_USE_OF_NULL_POINTER,
            "HV00A" => FDW_INVALID_STRING_FORMAT,
            "HV00B" => FDW_INVALID_HANDLE,
            "HV00C" => FDW_INVALID_OPTION_INDEX,
            "HV00D" => FDW_INVALID_OPTION_NAME,
            "HV00J" => FDW_OPTION_NAME_NOT_FOUND,
            "HV00K" => FDW_REPLY_HANDLE,
            "HV00L" => FDW_UNABLE_TO_CREATE_EXECUTION,
            "HV00M" => FDW_UNABLE_TO_CREATE_REPLY,
            "HV00N" => FDW_UNABLE_TO_ESTABLISH_CONNECTION,
            "HV00P" => FDW_NO_SCHEMAS,
            "HV00Q" => FDW_SCHEMA_NOT_FOUND,
            "HV00R" => FDW_TABLE_NOT_FOUND,
            "HV010" => FDW_FUNCTION_SEQUENCE_ERROR,
            "HV014" => FDW_TOO_MANY_HANDLES,
            "HV021" => FDW_INCONSISTENT_DESCRIPTOR_INFORMATION,
            "HV024" => FDW_INVALID_ATTRIBUTE_VALUE,
            "HV090" => FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH,
            "HV091" => FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER,
            "P0000" => PLPGSQL_ERROR,
            "P0001" => RAISE_EXCEPTION,
            "P0002" => NO_DATA_FOUND,
            "P0003" => TOO_MANY_ROWS,
            "P0004" => ASSERT_FAILURE,
            "XX000" => INTERNAL_ERROR,
            "XX001" => DATA_CORRUPTED,
            "XX002" => INDEX_CORRUPTED,
            _ => unreachable!(),
        }
    }
}
